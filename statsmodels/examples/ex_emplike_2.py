"""
This script is a basic tutorial on how to conduct empirical
likelihood estimation and inference in linear regression models.
"""
import numpy as np
import statsmodels.api as sm
np.random.seed(100)
X = np.random.standard_normal((40, 3))
X = sm.add_constant(X)
beta = np.arange(1, 5)
y = np.dot(X, beta) + np.random.standard_normal(40)
print('Lets play with EL Regression')
elmodel = sm.OLS(y, X)
fitted = elmodel.fit()
print('Intercept test')
test0_1 = fitted.el_test(np.array([0]), np.array([0]))
print(test0_1)
print('beta3 test')
test1 = fitted.el_test(np.array([4]), np.array([3]))
print(test1)
print('joint beta test')
test2 = fitted.el_test(np.array([3, 4]), np.array([2, 3]))
print(test2)
print('Confidence Interval for Beta1')
ci_beta1 = fitted.conf_int_el(1)
print(ci_beta1)
print('R-squared')
print(fitted.rsquared)
print('Params')
print(fitted.params)
print('Origin Regression')
originx = np.random.standard_normal((30, 3))
originbeta = np.array([[1], [2], [3]])
originy = np.dot(originx, originbeta) + np.random.standard_normal((30, 1))
originmodel = sm.emplike.ELOriginRegress(originy, originx)
originfit = originmodel.fit()
print('The fitted parameters')
print(originfit.params)
print('The MSE')
print(originfit.mse_model)
print('The R-squared')
print(originfit.rsquared)
print('Test beta1 =1')
test_beta1 = originfit.el_test([1], [1])
print(test_beta1)
print('confidence interval for beta1')
ci_beta2 = originfit.conf_int_el(1)
print(ci_beta2)
try:
    originfit.conf_int()
except:
    print('No normal inference available')